<<<<<<< HEAD
{"version":3,"file":"index.js","sources":["../src/normalize-options.ts","../src/index.ts"],"sourcesContent":["import { OptionValidator } from \"@babel/helper-validator-option\";\nconst v = new OptionValidator(\"@babel/preset-typescript\");\n\nexport interface Options {\n  ignoreExtensions?: boolean;\n  allowDeclareFields?: boolean;\n  allowNamespaces?: boolean;\n  disallowAmbiguousJSXLike?: boolean;\n  jsxPragma?: string;\n  jsxPragmaFrag?: string;\n  onlyRemoveTypeImports?: boolean;\n  optimizeConstEnums?: boolean;\n\n  // TODO: Remove in Babel 8\n  allExtensions?: boolean;\n  isTSX?: boolean;\n}\n\nexport default function normalizeOptions(options: Options = {}) {\n  let { allowNamespaces = true, jsxPragma, onlyRemoveTypeImports } = options;\n\n  const TopLevelOptions = {\n    ignoreExtensions: \"ignoreExtensions\",\n    allowNamespaces: \"allowNamespaces\",\n    disallowAmbiguousJSXLike: \"disallowAmbiguousJSXLike\",\n    jsxPragma: \"jsxPragma\",\n    jsxPragmaFrag: \"jsxPragmaFrag\",\n    onlyRemoveTypeImports: \"onlyRemoveTypeImports\",\n    optimizeConstEnums: \"optimizeConstEnums\",\n\n    // TODO: Remove in Babel 8\n    allExtensions: \"allExtensions\",\n    isTSX: \"isTSX\",\n  };\n\n  if (process.env.BABEL_8_BREAKING) {\n    v.invariant(\n      !(\"allExtensions\" in options) && !(\"isTSX\" in options),\n      \"The .allExtensions and .isTSX options have been removed.\\n\" +\n        \"If you want to disable JSX detection based on file extensions, \" +\n        \"you can set the .ignoreExtensions option to true.\\n\" +\n        \"If you want to force JSX parsing, you can enable the \" +\n        \"@babel/plugin-syntax-jsx plugin.\",\n    );\n\n    v.validateTopLevelOptions(options, TopLevelOptions);\n    allowNamespaces = v.validateBooleanOption(\n      TopLevelOptions.allowNamespaces,\n      options.allowNamespaces,\n      true,\n    );\n    jsxPragma = v.validateStringOption(\n      TopLevelOptions.jsxPragma,\n      options.jsxPragma,\n      \"React\",\n    );\n    onlyRemoveTypeImports = v.validateBooleanOption(\n      TopLevelOptions.onlyRemoveTypeImports,\n      options.onlyRemoveTypeImports,\n      true,\n    );\n  }\n\n  const jsxPragmaFrag = v.validateStringOption(\n    TopLevelOptions.jsxPragmaFrag,\n    options.jsxPragmaFrag,\n    \"React.Fragment\",\n  );\n\n  if (!process.env.BABEL_8_BREAKING) {\n    // eslint-disable-next-line no-var\n    var allExtensions = v.validateBooleanOption(\n      TopLevelOptions.allExtensions,\n      options.allExtensions,\n      false,\n    );\n\n    // eslint-disable-next-line no-var\n    var isTSX = v.validateBooleanOption(\n      TopLevelOptions.isTSX,\n      options.isTSX,\n      false,\n    );\n    if (isTSX) {\n      v.invariant(allExtensions, \"isTSX:true requires allExtensions:true\");\n    }\n  }\n\n  const ignoreExtensions = v.validateBooleanOption(\n    TopLevelOptions.ignoreExtensions,\n    options.ignoreExtensions,\n    false,\n  );\n\n  const disallowAmbiguousJSXLike = v.validateBooleanOption(\n    TopLevelOptions.disallowAmbiguousJSXLike,\n    options.disallowAmbiguousJSXLike,\n    false,\n  );\n  if (disallowAmbiguousJSXLike) {\n    if (process.env.BABEL_8_BREAKING) {\n      v.invariant(\n        ignoreExtensions,\n        \"disallowAmbiguousJSXLike:true requires ignoreExtensions:true\",\n      );\n    } else {\n      v.invariant(\n        allExtensions,\n        \"disallowAmbiguousJSXLike:true requires allExtensions:true\",\n      );\n    }\n  }\n\n  const optimizeConstEnums = v.validateBooleanOption(\n    TopLevelOptions.optimizeConstEnums,\n    options.optimizeConstEnums,\n    false,\n  );\n\n  const normalized: Options = {\n    ignoreExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  };\n  if (!process.env.BABEL_8_BREAKING) {\n    normalized.allExtensions = allExtensions;\n    normalized.isTSX = isTSX;\n  }\n  return normalized;\n}\n","import { declarePreset } from \"@babel/helper-plugin-utils\";\nimport transformTypeScript from \"@babel/plugin-transform-typescript\";\nimport syntaxJSX from \"@babel/plugin-syntax-jsx\";\nimport transformModulesCommonJS from \"@babel/plugin-transform-modules-commonjs\";\nimport normalizeOptions from \"./normalize-options\";\nimport type { Options } from \"./normalize-options\";\n\nexport default declarePreset((api, opts: Options) => {\n  api.assertVersion(7);\n\n  const {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  } = normalizeOptions(opts);\n\n  const pluginOptions = process.env.BABEL_8_BREAKING\n    ? (disallowAmbiguousJSXLike: boolean) => ({\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      })\n    : (disallowAmbiguousJSXLike: boolean) => ({\n        allowDeclareFields: opts.allowDeclareFields,\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      });\n\n  const getPlugins = (isTSX: boolean, disallowAmbiguousJSXLike: boolean) => {\n    if (process.env.BABEL_8_BREAKING) {\n      const tsPlugin = [\n        transformTypeScript,\n        pluginOptions(disallowAmbiguousJSXLike),\n      ];\n      return isTSX ? [tsPlugin, syntaxJSX] : [tsPlugin];\n    } else {\n      return [\n        [\n          transformTypeScript,\n          { isTSX, ...pluginOptions(disallowAmbiguousJSXLike) },\n        ],\n      ];\n    }\n  };\n\n  return {\n    overrides: allExtensions\n      ? [{ plugins: getPlugins(isTSX, disallowAmbiguousJSXLike) }]\n      : // Only set 'test' if explicitly requested, since it requires that\n        // Babel is being called with a filename.\n        [\n          {\n            test: !process.env.BABEL_8_BREAKING\n              ? /\\.ts$/\n              : filename => filename == null || filename.endsWith(\".ts\"),\n            plugins: getPlugins(false, false),\n          },\n          {\n            test: !process.env.BABEL_8_BREAKING\n              ? /\\.mts$/\n              : filename => filename?.endsWith(\".mts\"),\n            sourceType: \"module\",\n            plugins: getPlugins(false, true),\n          },\n          {\n            test: !process.env.BABEL_8_BREAKING\n              ? /\\.cts$/\n              : filename => filename?.endsWith(\".cts\"),\n            sourceType: \"unambiguous\",\n            plugins: [\n              [transformModulesCommonJS, { allowTopLevelThis: true }],\n              [transformTypeScript, pluginOptions(true)],\n            ],\n          },\n          {\n            test: !process.env.BABEL_8_BREAKING\n              ? /\\.tsx$/\n              : filename => filename?.endsWith(\".tsx\"),\n            // disallowAmbiguousJSXLike is a no-op when parsing TSX, since it's\n            // always disallowed.\n            plugins: getPlugins(true, false),\n          },\n        ],\n  };\n});\n"],"names":["v","OptionValidator","normalizeOptions","options","allowNamespaces","jsxPragma","onlyRemoveTypeImports","TopLevelOptions","ignoreExtensions","disallowAmbiguousJSXLike","jsxPragmaFrag","optimizeConstEnums","allExtensions","isTSX","validateStringOption","validateBooleanOption","invariant","normalized","declarePreset","api","opts","assertVersion","pluginOptions","allowDeclareFields","getPlugins","transformTypeScript","Object","assign","overrides","plugins","test","sourceType","transformModulesCommonJS","allowTopLevelThis"],"mappings":"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"}
=======
<<<<<<< HEAD
{"version":3,"file":"index.js","sources":["../src/normalize-options.ts","../src/index.ts"],"sourcesContent":["import { OptionValidator } from \"@babel/helper-validator-option\";\nconst v = new OptionValidator(\"@babel/preset-typescript\");\n\nexport interface Options {\n  allExtensions?: boolean;\n  allowDeclareFields?: boolean;\n  allowNamespaces?: boolean;\n  disallowAmbiguousJSXLike?: boolean;\n  isTSX?: boolean;\n  jsxPragma?: string;\n  jsxPragmaFrag?: string;\n  onlyRemoveTypeImports?: boolean;\n  optimizeConstEnums?: boolean;\n}\n\nexport default function normalizeOptions(options: Options = {}) {\n  let { allowNamespaces = true, jsxPragma, onlyRemoveTypeImports } = options;\n\n  const TopLevelOptions = {\n    allExtensions: \"allExtensions\",\n    allowNamespaces: \"allowNamespaces\",\n    disallowAmbiguousJSXLike: \"disallowAmbiguousJSXLike\",\n    isTSX: \"isTSX\",\n    jsxPragma: \"jsxPragma\",\n    jsxPragmaFrag: \"jsxPragmaFrag\",\n    onlyRemoveTypeImports: \"onlyRemoveTypeImports\",\n    optimizeConstEnums: \"optimizeConstEnums\",\n  };\n\n  if (process.env.BABEL_8_BREAKING) {\n    v.validateTopLevelOptions(options, TopLevelOptions);\n    allowNamespaces = v.validateBooleanOption(\n      TopLevelOptions.allowNamespaces,\n      options.allowNamespaces,\n      true,\n    );\n    jsxPragma = v.validateStringOption(\n      TopLevelOptions.jsxPragma,\n      options.jsxPragma,\n      \"React\",\n    );\n    onlyRemoveTypeImports = v.validateBooleanOption(\n      TopLevelOptions.onlyRemoveTypeImports,\n      options.onlyRemoveTypeImports,\n      true,\n    );\n  }\n\n  const jsxPragmaFrag = v.validateStringOption(\n    TopLevelOptions.jsxPragmaFrag,\n    options.jsxPragmaFrag,\n    \"React.Fragment\",\n  );\n\n  const allExtensions = v.validateBooleanOption(\n    TopLevelOptions.allExtensions,\n    options.allExtensions,\n    false,\n  );\n\n  const isTSX = v.validateBooleanOption(\n    TopLevelOptions.isTSX,\n    options.isTSX,\n    false,\n  );\n  if (isTSX) {\n    v.invariant(allExtensions, \"isTSX:true requires allExtensions:true\");\n  }\n\n  const disallowAmbiguousJSXLike = v.validateBooleanOption(\n    TopLevelOptions.disallowAmbiguousJSXLike,\n    options.disallowAmbiguousJSXLike,\n    false,\n  );\n  if (disallowAmbiguousJSXLike) {\n    v.invariant(\n      allExtensions,\n      \"disallowAmbiguousJSXLike:true requires allExtensions:true\",\n    );\n  }\n\n  const optimizeConstEnums = v.validateBooleanOption(\n    TopLevelOptions.optimizeConstEnums,\n    options.optimizeConstEnums,\n    false,\n  );\n\n  return {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  };\n}\n","import { declarePreset } from \"@babel/helper-plugin-utils\";\nimport transformTypeScript from \"@babel/plugin-transform-typescript\";\nimport normalizeOptions from \"./normalize-options\";\nimport type { Options } from \"./normalize-options\";\n\nexport default declarePreset((api, opts: Options) => {\n  api.assertVersion(7);\n\n  const {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  } = normalizeOptions(opts);\n\n  const pluginOptions = process.env.BABEL_8_BREAKING\n    ? (isTSX: boolean, disallowAmbiguousJSXLike: boolean) => ({\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        isTSX,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      })\n    : (isTSX: boolean, disallowAmbiguousJSXLike: boolean) => ({\n        allowDeclareFields: opts.allowDeclareFields,\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        isTSX,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      });\n\n  return {\n    overrides: allExtensions\n      ? [\n          {\n            plugins: [\n              [\n                transformTypeScript,\n                pluginOptions(isTSX, disallowAmbiguousJSXLike),\n              ],\n            ],\n          },\n        ]\n      : // Only set 'test' if explicitly requested, since it requires that\n        // Babel is being called`\n        [\n          {\n            test: /\\.ts$/,\n            plugins: [[transformTypeScript, pluginOptions(false, false)]],\n          },\n          {\n            test: /\\.mts$/,\n            sourceType: \"module\",\n            plugins: [[transformTypeScript, pluginOptions(false, true)]],\n          },\n          {\n            test: /\\.cts$/,\n            sourceType: \"script\",\n            plugins: [[transformTypeScript, pluginOptions(false, true)]],\n          },\n          {\n            test: /\\.tsx$/,\n            // disallowAmbiguousJSXLike is a no-op when parsing TSX, since it's\n            // always disallowed.\n            plugins: [[transformTypeScript, pluginOptions(true, false)]],\n          },\n        ],\n  };\n});\n"],"names":["v","OptionValidator","normalizeOptions","options","allowNamespaces","jsxPragma","onlyRemoveTypeImports","TopLevelOptions","allExtensions","disallowAmbiguousJSXLike","isTSX","jsxPragmaFrag","optimizeConstEnums","validateStringOption","validateBooleanOption","invariant","declarePreset","api","opts","assertVersion","pluginOptions","allowDeclareFields","overrides","plugins","transformTypeScript","test","sourceType"],"mappings":"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"}
=======
{"version":3,"file":"index.js","sources":["../src/normalize-options.ts","../src/index.ts"],"sourcesContent":["import { OptionValidator } from \"@babel/helper-validator-option\";\nconst v = new OptionValidator(\"@babel/preset-typescript\");\n\nexport interface Options {\n  ignoreExtensions?: boolean;\n  allowDeclareFields?: boolean;\n  allowNamespaces?: boolean;\n  disallowAmbiguousJSXLike?: boolean;\n  jsxPragma?: string;\n  jsxPragmaFrag?: string;\n  onlyRemoveTypeImports?: boolean;\n  optimizeConstEnums?: boolean;\n\n  // TODO: Remove in Babel 8\n  allExtensions?: boolean;\n  isTSX?: boolean;\n}\n\nexport default function normalizeOptions(options: Options = {}) {\n  let { allowNamespaces = true, jsxPragma, onlyRemoveTypeImports } = options;\n\n  const TopLevelOptions = {\n    ignoreExtensions: \"ignoreExtensions\",\n    allowNamespaces: \"allowNamespaces\",\n    disallowAmbiguousJSXLike: \"disallowAmbiguousJSXLike\",\n    jsxPragma: \"jsxPragma\",\n    jsxPragmaFrag: \"jsxPragmaFrag\",\n    onlyRemoveTypeImports: \"onlyRemoveTypeImports\",\n    optimizeConstEnums: \"optimizeConstEnums\",\n\n    // TODO: Remove in Babel 8\n    allExtensions: \"allExtensions\",\n    isTSX: \"isTSX\",\n  };\n\n  if (process.env.BABEL_8_BREAKING) {\n    v.invariant(\n      !(\"allExtensions\" in options) && !(\"isTSX\" in options),\n      \"The .allExtensions and .isTSX options have been removed.\\n\" +\n        \"If you want to disable JSX detection based on file extensions, \" +\n        \"you can set the .ignoreExtensions option to true.\\n\" +\n        \"If you want to force JSX parsing, you can enable the \" +\n        \"@babel/plugin-syntax-jsx plugin.\",\n    );\n\n    v.validateTopLevelOptions(options, TopLevelOptions);\n    allowNamespaces = v.validateBooleanOption(\n      TopLevelOptions.allowNamespaces,\n      options.allowNamespaces,\n      true,\n    );\n    jsxPragma = v.validateStringOption(\n      TopLevelOptions.jsxPragma,\n      options.jsxPragma,\n      \"React\",\n    );\n    onlyRemoveTypeImports = v.validateBooleanOption(\n      TopLevelOptions.onlyRemoveTypeImports,\n      options.onlyRemoveTypeImports,\n      true,\n    );\n  }\n\n  const jsxPragmaFrag = v.validateStringOption(\n    TopLevelOptions.jsxPragmaFrag,\n    options.jsxPragmaFrag,\n    \"React.Fragment\",\n  );\n\n  if (!process.env.BABEL_8_BREAKING) {\n    // eslint-disable-next-line no-var\n    var allExtensions = v.validateBooleanOption(\n      TopLevelOptions.allExtensions,\n      options.allExtensions,\n      false,\n    );\n\n    // eslint-disable-next-line no-var\n    var isTSX = v.validateBooleanOption(\n      TopLevelOptions.isTSX,\n      options.isTSX,\n      false,\n    );\n    if (isTSX) {\n      v.invariant(allExtensions, \"isTSX:true requires allExtensions:true\");\n    }\n  }\n\n  const ignoreExtensions = v.validateBooleanOption(\n    TopLevelOptions.ignoreExtensions,\n    options.ignoreExtensions,\n    false,\n  );\n\n  const disallowAmbiguousJSXLike = v.validateBooleanOption(\n    TopLevelOptions.disallowAmbiguousJSXLike,\n    options.disallowAmbiguousJSXLike,\n    false,\n  );\n  if (disallowAmbiguousJSXLike) {\n    if (process.env.BABEL_8_BREAKING) {\n      v.invariant(\n        ignoreExtensions,\n        \"disallowAmbiguousJSXLike:true requires ignoreExtensions:true\",\n      );\n    } else {\n      v.invariant(\n        allExtensions,\n        \"disallowAmbiguousJSXLike:true requires allExtensions:true\",\n      );\n    }\n  }\n\n  const optimizeConstEnums = v.validateBooleanOption(\n    TopLevelOptions.optimizeConstEnums,\n    options.optimizeConstEnums,\n    false,\n  );\n\n  const normalized: Options = {\n    ignoreExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  };\n  if (!process.env.BABEL_8_BREAKING) {\n    normalized.allExtensions = allExtensions;\n    normalized.isTSX = isTSX;\n  }\n  return normalized;\n}\n","import { declarePreset } from \"@babel/helper-plugin-utils\";\nimport transformTypeScript from \"@babel/plugin-transform-typescript\";\nimport syntaxJSX from \"@babel/plugin-syntax-jsx\";\nimport transformModulesCommonJS from \"@babel/plugin-transform-modules-commonjs\";\nimport normalizeOptions from \"./normalize-options\";\nimport type { Options } from \"./normalize-options\";\n\nexport default declarePreset((api, opts: Options) => {\n  api.assertVersion(7);\n\n  const {\n    allExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  } = normalizeOptions(opts);\n\n  const pluginOptions = process.env.BABEL_8_BREAKING\n    ? (disallowAmbiguousJSXLike: boolean) => ({\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      })\n    : (disallowAmbiguousJSXLike: boolean) => ({\n        allowDeclareFields: opts.allowDeclareFields,\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      });\n\n  const getPlugins = (isTSX: boolean, disallowAmbiguousJSXLike: boolean) => {\n    if (process.env.BABEL_8_BREAKING) {\n      const tsPlugin = [\n        transformTypeScript,\n        pluginOptions(disallowAmbiguousJSXLike),\n      ];\n      return isTSX ? [tsPlugin, syntaxJSX] : [tsPlugin];\n    } else {\n      return [\n        [\n          transformTypeScript,\n          { isTSX, ...pluginOptions(disallowAmbiguousJSXLike) },\n        ],\n      ];\n    }\n  };\n\n  return {\n    overrides: allExtensions\n      ? [{ plugins: getPlugins(isTSX, disallowAmbiguousJSXLike) }]\n      : // Only set 'test' if explicitly requested, since it requires that\n        // Babel is being called with a filename.\n        [\n          {\n            test: !process.env.BABEL_8_BREAKING\n              ? /\\.ts$/\n              : filename => filename == null || filename.endsWith(\".ts\"),\n            plugins: getPlugins(false, false),\n          },\n          {\n            test: !process.env.BABEL_8_BREAKING\n              ? /\\.mts$/\n              : filename => filename?.endsWith(\".mts\"),\n            sourceType: \"module\",\n            plugins: getPlugins(false, true),\n          },\n          {\n            test: !process.env.BABEL_8_BREAKING\n              ? /\\.cts$/\n              : filename => filename?.endsWith(\".cts\"),\n            sourceType: \"unambiguous\",\n            plugins: [\n              [transformModulesCommonJS, { allowTopLevelThis: true }],\n              [transformTypeScript, pluginOptions(true)],\n            ],\n          },\n          {\n            test: !process.env.BABEL_8_BREAKING\n              ? /\\.tsx$/\n              : filename => filename?.endsWith(\".tsx\"),\n            // disallowAmbiguousJSXLike is a no-op when parsing TSX, since it's\n            // always disallowed.\n            plugins: getPlugins(true, false),\n          },\n        ],\n  };\n});\n"],"names":["v","OptionValidator","normalizeOptions","options","allowNamespaces","jsxPragma","onlyRemoveTypeImports","TopLevelOptions","ignoreExtensions","disallowAmbiguousJSXLike","jsxPragmaFrag","optimizeConstEnums","allExtensions","isTSX","validateStringOption","validateBooleanOption","invariant","normalized","declarePreset","api","opts","assertVersion","pluginOptions","allowDeclareFields","getPlugins","transformTypeScript","Object","assign","overrides","plugins","test","sourceType","transformModulesCommonJS","allowTopLevelThis"],"mappings":";;;;;;;;;;;;;;;AACA,MAAMA,CAAC,GAAG,IAAIC,qCAAe,CAAC,0BAA0B,CAAC,CAAA;AAiB1C,SAASC,gBAAgBA,CAACC,OAAgB,GAAG,EAAE,EAAE;EAC9D,IAAI;AAAEC,IAAAA,eAAe,GAAG,IAAI;IAAEC,SAAS;AAAEC,IAAAA,qBAAAA;AAAsB,GAAC,GAAGH,OAAO,CAAA;AAE1E,EAAA,MAAMI,eAAe,GAAG;AACtBC,IAAAA,gBAAgB,EAAE,kBAAkB;AACpCJ,IAAAA,eAAe,EAAE,iBAAiB;AAClCK,IAAAA,wBAAwB,EAAE,0BAA0B;AACpDJ,IAAAA,SAAS,EAAE,WAAW;AACtBK,IAAAA,aAAa,EAAE,eAAe;AAC9BJ,IAAAA,qBAAqB,EAAE,uBAAuB;AAC9CK,IAAAA,kBAAkB,EAAE,oBAAoB;AAGxCC,IAAAA,aAAa,EAAE,eAAe;AAC9BC,IAAAA,KAAK,EAAE,OAAA;GACR,CAAA;AA8BD,EAAA,MAAMH,aAAa,GAAGV,CAAC,CAACc,oBAAoB,CAC1CP,eAAe,CAACG,aAAa,EAC7BP,OAAO,CAACO,aAAa,EACrB,gBAAgB,CACjB,CAAA;AAEkC,EAAA;AAEjC,IAAA,IAAIE,aAAa,GAAGZ,CAAC,CAACe,qBAAqB,CACzCR,eAAe,CAACK,aAAa,EAC7BT,OAAO,CAACS,aAAa,EACrB,KAAK,CACN,CAAA;AAGD,IAAA,IAAIC,KAAK,GAAGb,CAAC,CAACe,qBAAqB,CACjCR,eAAe,CAACM,KAAK,EACrBV,OAAO,CAACU,KAAK,EACb,KAAK,CACN,CAAA;AACD,IAAA,IAAIA,KAAK,EAAE;AACTb,MAAAA,CAAC,CAACgB,SAAS,CAACJ,aAAa,EAAE,wCAAwC,CAAC,CAAA;AACtE,KAAA;AACF,GAAA;AAEA,EAAA,MAAMJ,gBAAgB,GAAGR,CAAC,CAACe,qBAAqB,CAC9CR,eAAe,CAACC,gBAAgB,EAChCL,OAAO,CAACK,gBAAgB,EACxB,KAAK,CACN,CAAA;AAED,EAAA,MAAMC,wBAAwB,GAAGT,CAAC,CAACe,qBAAqB,CACtDR,eAAe,CAACE,wBAAwB,EACxCN,OAAO,CAACM,wBAAwB,EAChC,KAAK,CACN,CAAA;AACD,EAAA,IAAIA,wBAAwB,EAAE;AAMrB,IAAA;AACLT,MAAAA,CAAC,CAACgB,SAAS,CACTJ,aAAa,EACb,2DAA2D,CAC5D,CAAA;AACH,KAAA;AACF,GAAA;AAEA,EAAA,MAAMD,kBAAkB,GAAGX,CAAC,CAACe,qBAAqB,CAChDR,eAAe,CAACI,kBAAkB,EAClCR,OAAO,CAACQ,kBAAkB,EAC1B,KAAK,CACN,CAAA;AAED,EAAA,MAAMM,UAAmB,GAAG;IAC1BT,gBAAgB;IAChBJ,eAAe;IACfK,wBAAwB;IACxBJ,SAAS;IACTK,aAAa;IACbJ,qBAAqB;AACrBK,IAAAA,kBAAAA;GACD,CAAA;AACkC,EAAA;IACjCM,UAAU,CAACL,aAAa,GAAGA,aAAa,CAAA;IACxCK,UAAU,CAACJ,KAAK,GAAGA,KAAK,CAAA;AAC1B,GAAA;AACA,EAAA,OAAOI,UAAU,CAAA;AACnB;;AC9HA,YAAeC,+BAAa,CAAC,CAACC,GAAG,EAAEC,IAAa,KAAK;AACnDD,EAAAA,GAAG,CAACE,aAAa,CAAC,CAAC,CAAC,CAAA;EAEpB,MAAM;IACJT,aAAa;IACbR,eAAe;IACfK,wBAAwB;IACxBI,KAAK;IACLR,SAAS;IACTK,aAAa;IACbJ,qBAAqB;AACrBK,IAAAA,kBAAAA;AACF,GAAC,GAAGT,gBAAgB,CAACkB,IAAI,CAAC,CAAA;EAE1B,MAAME,aAAa,GASdb,wBAAiC,KAAM;IACtCc,kBAAkB,EAAEH,IAAI,CAACG,kBAAkB;IAC3CnB,eAAe;IACfK,wBAAwB;IACxBJ,SAAS;IACTK,aAAa;IACbJ,qBAAqB;AACrBK,IAAAA,kBAAAA;AACF,GAAC,CAAC,CAAA;AAEN,EAAA,MAAMa,UAAU,GAAGA,CAACX,KAAc,EAAEJ,wBAAiC,KAAK;AAOjE,IAAA;AACL,MAAA,OAAO,CACL,CACEgB,uCAAmB,EAAAC,MAAA,CAAAC,MAAA,CAAA;AACjBd,QAAAA,KAAAA;AAAK,OAAA,EAAKS,aAAa,CAACb,wBAAwB,CAAC,EACpD,CACF,CAAA;AACH,KAAA;GACD,CAAA;EAED,OAAO;IACLmB,SAAS,EAAEhB,aAAa,GACpB,CAAC;AAAEiB,MAAAA,OAAO,EAAEL,UAAU,CAACX,KAAK,EAAEJ,wBAAwB,CAAA;KAAG,CAAC,GAG1D,CACE;AACEqB,MAAAA,IAAI,EACA,OACwD;AAC5DD,MAAAA,OAAO,EAAEL,UAAU,CAAC,KAAK,EAAE,KAAK,CAAA;AAClC,KAAC,EACD;AACEM,MAAAA,IAAI,EACA,QACsC;AAC1CC,MAAAA,UAAU,EAAE,QAAQ;AACpBF,MAAAA,OAAO,EAAEL,UAAU,CAAC,KAAK,EAAE,IAAI,CAAA;AACjC,KAAC,EACD;AACEM,MAAAA,IAAI,EACA,QACsC;AAC1CC,MAAAA,UAAU,EAAE,aAAa;AACzBF,MAAAA,OAAO,EAAE,CACP,CAACG,4CAAwB,EAAE;AAAEC,QAAAA,iBAAiB,EAAE,IAAA;OAAM,CAAC,EACvD,CAACR,uCAAmB,EAAEH,aAAa,CAAC,IAAI,CAAC,CAAC,CAAA;AAE9C,KAAC,EACD;AACEQ,MAAAA,IAAI,EACA,QACsC;AAG1CD,MAAAA,OAAO,EAAEL,UAAU,CAAC,IAAI,EAAE,KAAK,CAAA;KAChC,CAAA;GAER,CAAA;AACH,CAAC,CAAC;;;;"}
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
