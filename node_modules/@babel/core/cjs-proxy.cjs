"use strict";

const babelP = import("./lib/index.js");
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
let babel = null;
Object.defineProperty(exports, "__ initialize @babel/core cjs proxy __", {
  set(val) {
    babel = val;
  },
});
<<<<<<< HEAD
=======
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6

const functionNames = [
  "createConfigItem",
  "loadPartialConfig",
  "loadOptions",
  "transform",
  "transformFile",
  "transformFromAst",
  "parse",
];
<<<<<<< HEAD
const propertyNames = ["types", "tokTypes", "traverse", "template", "version"];

for (const name of functionNames) {
=======
<<<<<<< HEAD

for (const name of functionNames) {
  exports[`${name}Sync`] = function () {
    throw new Error(
      `"${name}Sync" is not supported when loading @babel/core using require()`
    );
  };
=======
const propertyNames = ["types", "tokTypes", "traverse", "template", "version"];

for (const name of functionNames) {
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
  exports[name] = function (...args) {
    babelP.then(babel => {
      babel[name](...args);
    });
  };
  exports[`${name}Async`] = function (...args) {
    return babelP.then(babel => babel[`${name}Async`](...args));
  };
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
  exports[`${name}Sync`] = function (...args) {
    if (!babel) throw notLoadedError(`${name}Sync`, "callable");
    return babel[`${name}Sync`](...args);
  };
}

for (const name of propertyNames) {
  Object.defineProperty(exports, name, {
    get() {
      if (!babel) throw notLoadedError(name, "accessible");
      return babel[name];
    },
  });
}

function notLoadedError(name, keyword) {
  return new Error(
    `The \`${name}\` export of @babel/core is only ${keyword}` +
      ` from the CommonJS version after that the ESM version is loaded.`
  );
<<<<<<< HEAD
=======
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
}
