"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
<<<<<<< HEAD
=======
<<<<<<< HEAD
exports.default = _default;
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
exports.AUTOMATIC_FIX_LEVELS = void 0;
exports.default = _default;
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _ora() {
  const data = _interopRequireDefault(require("ora"));
  _ora = function () {
    return data;
  };
  return data;
}
function _cliTools() {
  const data = require("@react-native-community/cli-tools");
  _cliTools = function () {
    return data;
  };
  return data;
}
var _healthchecks = require("./healthchecks");
var _common = require("./healthchecks/common");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
let AUTOMATIC_FIX_LEVELS;
exports.AUTOMATIC_FIX_LEVELS = AUTOMATIC_FIX_LEVELS;
<<<<<<< HEAD
=======

=======
exports.AUTOMATIC_FIX_LEVELS = void 0;
exports.default = _default;
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _ora() {
  const data = _interopRequireDefault(require("ora"));
  _ora = function () {
    return data;
  };
  return data;
}
function _cliTools() {
  const data = require("@react-native-community/cli-tools");
  _cliTools = function () {
    return data;
  };
  return data;
}
var _healthchecks = require("./healthchecks");
var _common = require("./healthchecks/common");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
let AUTOMATIC_FIX_LEVELS;
exports.AUTOMATIC_FIX_LEVELS = AUTOMATIC_FIX_LEVELS;
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
(function (AUTOMATIC_FIX_LEVELS) {
  AUTOMATIC_FIX_LEVELS["ALL_ISSUES"] = "ALL_ISSUES";
  AUTOMATIC_FIX_LEVELS["ERRORS"] = "ERRORS";
  AUTOMATIC_FIX_LEVELS["WARNINGS"] = "WARNINGS";
})(AUTOMATIC_FIX_LEVELS || (exports.AUTOMATIC_FIX_LEVELS = AUTOMATIC_FIX_LEVELS = {}));
<<<<<<< HEAD
=======
<<<<<<< HEAD

=======
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
async function _default({
  healthchecks,
  automaticFixLevel,
  stats,
  environmentInfo
}) {
  // Remove the fix options from screen
  if (process.stdout.isTTY) {
<<<<<<< HEAD
    process.stdout.moveCursor(0, -6);
    process.stdout.clearScreenDown();
  }
=======
<<<<<<< HEAD
    // @ts-ignore
    process.stdout.moveCursor(0, -6); // @ts-ignore

    process.stdout.clearScreenDown();
  }

=======
    process.stdout.moveCursor(0, -6);
    process.stdout.clearScreenDown();
  }
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
  const totalIssuesBasedOnFixLevel = {
    [AUTOMATIC_FIX_LEVELS.ALL_ISSUES]: stats.errors + stats.warnings,
    [AUTOMATIC_FIX_LEVELS.ERRORS]: stats.errors,
    [AUTOMATIC_FIX_LEVELS.WARNINGS]: stats.warnings
  };
  const issuesCount = totalIssuesBasedOnFixLevel[automaticFixLevel];
<<<<<<< HEAD
  _cliTools().logger.log(`\nAttempting to fix ${_chalk().default.bold(issuesCount.toString())} issue${issuesCount > 1 ? 's' : ''}...`);
=======
<<<<<<< HEAD

  _cliTools().logger.log(`\nAttempting to fix ${_chalk().default.bold(issuesCount.toString())} issue${issuesCount > 1 ? 's' : ''}...`);

=======
  _cliTools().logger.log(`\nAttempting to fix ${_chalk().default.bold(issuesCount.toString())} issue${issuesCount > 1 ? 's' : ''}...`);
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
  for (const category of healthchecks) {
    const healthchecksToRun = category.healthchecks.filter(healthcheck => {
      if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.ALL_ISSUES) {
        return healthcheck.needsToBeFixed;
      }
<<<<<<< HEAD
=======
<<<<<<< HEAD

>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
      if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.ERRORS) {
        return healthcheck.needsToBeFixed && healthcheck.type === _healthchecks.HEALTHCHECK_TYPES.ERROR;
      }
      if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.WARNINGS) {
        return healthcheck.needsToBeFixed && healthcheck.type === _healthchecks.HEALTHCHECK_TYPES.WARNING;
      }
      return;
    });
    if (!healthchecksToRun.length) {
      continue;
    }
    _cliTools().logger.log(`\n${_chalk().default.dim(category.label)}`);
<<<<<<< HEAD
=======

=======
      if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.ERRORS) {
        return healthcheck.needsToBeFixed && healthcheck.type === _healthchecks.HEALTHCHECK_TYPES.ERROR;
      }
      if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.WARNINGS) {
        return healthcheck.needsToBeFixed && healthcheck.type === _healthchecks.HEALTHCHECK_TYPES.WARNING;
      }
      return;
    });
    if (!healthchecksToRun.length) {
      continue;
    }
    _cliTools().logger.log(`\n${_chalk().default.dim(category.label)}`);
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
    for (const healthcheckToRun of healthchecksToRun) {
      // @todo replace this with `getLoader` from `tools`
      const spinner = (0, _ora().default)({
        prefixText: '',
        text: healthcheckToRun.label
      }).start();
<<<<<<< HEAD
=======
<<<<<<< HEAD

=======
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
      try {
        await healthcheckToRun.runAutomaticFix({
          loader: spinner,
          logManualInstallation: _common.logManualInstallation,
          environmentInfo
        });
<<<<<<< HEAD
      } catch (error) {
        // TODO: log the error in a meaningful way
=======
<<<<<<< HEAD
      } catch (error) {// TODO: log the error in a meaningful way
=======
      } catch (error) {
        // TODO: log the error in a meaningful way
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
      }
    }
  }
}

//# sourceMappingURL=runAutomaticFix.js.map