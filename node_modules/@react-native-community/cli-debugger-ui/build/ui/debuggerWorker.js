"use strict";

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* global __fbBatchedBridge, self, importScripts, postMessage, onmessage: true */
<<<<<<< HEAD
=======
<<<<<<< HEAD

>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
/* eslint no-unused-vars: 0 */

onmessage = function () {
  var visibilityState;
<<<<<<< HEAD
=======

=======
/* eslint no-unused-vars: 0 */

onmessage = function () {
  var visibilityState;
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
  var showVisibilityWarning = function () {
    var hasWarned = false;
    return function () {
      // Wait until `YellowBox` gets initialized before displaying the warning.
      if (hasWarned || console.warn.toString().includes('[native code]')) {
        return;
      }
<<<<<<< HEAD
=======
<<<<<<< HEAD

=======
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
      hasWarned = true;
      console.warn('Remote debugger is in a background tab which may cause apps to ' + 'perform slowly. Fix this by foregrounding the tab (or opening it in ' + 'a separate window).');
    };
  }();
<<<<<<< HEAD
=======
<<<<<<< HEAD

=======
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
  var messageHandlers = {
    executeApplicationScript: function (message, sendReply) {
      for (var key in message.inject) {
        self[key] = JSON.parse(message.inject[key]);
      }
<<<<<<< HEAD
      var error;
=======
<<<<<<< HEAD

      var error;

=======
      var error;
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
      try {
        importScripts(message.url);
      } catch (err) {
        error = err.message;
      }
<<<<<<< HEAD
      sendReply(null /* result */, error);
=======
<<<<<<< HEAD

      sendReply(null
      /* result */
      , error);
=======
      sendReply(null /* result */, error);
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
    },
    setDebuggerVisibility: function (message) {
      visibilityState = message.visibilityState;
    }
  };
  return function (message) {
    if (visibilityState === 'hidden') {
      showVisibilityWarning();
    }
<<<<<<< HEAD
    var object = message.data;
=======
<<<<<<< HEAD

    var object = message.data;

=======
    var object = message.data;
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
    var sendReply = function (result, error) {
      postMessage({
        replyID: object.id,
        result: result,
        error: error
      });
    };
<<<<<<< HEAD
    var handler = messageHandlers[object.method];
=======
<<<<<<< HEAD

    var handler = messageHandlers[object.method];

=======
    var handler = messageHandlers[object.method];
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
    if (handler) {
      // Special cased handlers
      handler(object, sendReply);
    } else {
      // Other methods get called on the bridge
      var returnValue = [[], [], [], 0];
      var error;
<<<<<<< HEAD
=======
<<<<<<< HEAD

=======
>>>>>>> zen
>>>>>>> ede5c2d510e1c4029dfffa203387bb3f20d74fc6
      try {
        if (typeof __fbBatchedBridge === 'object') {
          returnValue = __fbBatchedBridge[object.method].apply(null, object.arguments);
        } else {
          error = 'Failed to call function, __fbBatchedBridge is undefined';
        }
      } catch (err) {
        error = err.message;
      } finally {
        sendReply(JSON.stringify(returnValue), error);
      }
    }
  };
}();

//# sourceMappingURL=debuggerWorker.js.map